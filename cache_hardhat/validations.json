{
  "version": "3.4",
  "log": [
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "1ec1294c0be5ccc45cf1ef9fa4f13f04ed40eae00f6c3b4a3b3c3839854236b8",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2796": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2796",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "54028094a47a44814597a25d604ce311884abb2c146866f354672c262cc11524",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "b72b638ada62289713e363cdc224ce977d9b049332d67fcb94b8d326362f4fc2",
          "withoutMetadata": "a2d2ece4327f369998efa8ef7722a6bbd4387009981d044e421647ae63c90e0b",
          "linkedWithoutMetadata": "a2d2ece4327f369998efa8ef7722a6bbd4387009981d044e421647ae63c90e0b"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "bf32b720868d89f0267eb8c9c837215a04c108ed3682f8f4feca4395a102cc45",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "5b8b30f1d52c322ce5722e0c7a03ad3acf45dac50053d7d46ab425479db766a9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "27628e4246186e96afc24ade671ef8e2496d01b867a2f078e57ec5cf9109c6c6",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "ac5cdd58997d1435e6d5c76e51f133c8d2baa38ae55264819ba5a95c8c3213e9",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "7e684ad7f1061c9053dbce5c161b46112468fa6f9fde3aa496732acf6aaad776",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "a2e7b8462655b40223b7ef0ee4f94a2fa6b25224f310db63c0e63234eb232716",
          "withoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d",
          "linkedWithoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3884_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3893_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3884_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3893_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3884_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "f2abfb2dbbda7b0c9b03f71e47df63770b9244ee68470c5953b23facacc4f468",
          "withoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37",
          "linkedWithoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5456",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5456": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "345bae3565d6c0d6b0d34b9faeddd9394bd0121bdcfc52e426b5648301626a14",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "00feade47321e29890cc62c609755c5c0208237ce212bcc1e8cc2fb6ce5bbe8c",
          "withoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c",
          "linkedWithoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "6ae7360a17b9c59e1796828b5ec316b7a9f2af304a3811079a7fe768c32dc0f7",
          "withoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288",
          "linkedWithoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6892_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30781",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6892_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6892_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "d0921faa0dbf500ef85134d2d3787ac32bdf8a5d99e23d7d8e048c2bcaf0c618",
          "withoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f",
          "linkedWithoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18741",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18741": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:113",
        "version": {
          "withMetadata": "0fe6c66eed54eeb08243b95ec94c4b03c963846541be7b49efba971ea2a2d18b",
          "withoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c",
          "linkedWithoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:150"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7782_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30781",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:139"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:145"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17477": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7782_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17432",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17477",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "7e71140e57e02ec6911e21487d969b350c0ca0c347cea8539992d150c63f0373",
          "withoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e",
          "linkedWithoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30781)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30781,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30781)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "d0ffda05fbe71c7f709468f4d3538343c3ec6833ad25031e7aaf11b38d0cd58b",
          "withoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb",
          "linkedWithoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29192",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9538_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29192": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9538_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9538_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29396_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26749",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26749": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "aba8efbb4278e3446aeaceaa8b5ef8ffe7c44458400a688cecdd93b1c6aadbee",
          "withoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9",
          "linkedWithoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29281",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10715_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29281": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10715_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29464_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10715_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29464_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "8e4479fd5eef23d264d1c867fa32f823018acd46bfab49acc9909bf80d434d6f",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "ef258882de782a4e9d0b3127518402d442d808340f56fcaae572c845cf7b0881",
          "withoutMetadata": "b6ce41bea82c8383d5f35cd969e852814b83c617c36e69d8064062004dda0cf1",
          "linkedWithoutMetadata": "b6ce41bea82c8383d5f35cd969e852814b83c617c36e69d8064062004dda0cf1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "05794f4b41b4988bbfe3cebd8de15b84c7e77617dd50ccdeb9acd59f2d75bc85",
          "withoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef",
          "linkedWithoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11929",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11929": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "2cbf5b46b71db8b60dfc2b56d5a4792f989fba568cca20b7316641aa4002eb4c",
          "withoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4",
          "linkedWithoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "790755b958619a6c7d10087090add8558b750ecd27fe21456d42059cc7776f28",
          "withoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f",
          "linkedWithoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "2dbee1aefe77ea71880bbfa65fdf59dda02f2930a9f62735755eb74268468073",
          "withoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575",
          "linkedWithoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "e71d6810f2b0413f1871d25b4c67752bfd01951b4fd664a3ec18d91211499f5e",
          "withoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928",
          "linkedWithoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "87143cc9fe1c032a5be0db8e474ce1d161e66d32d696f4782e2ab4419fcef503",
          "withoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6",
          "linkedWithoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "7f84e4b8c881ab06e7d6ac3b04df91056ec57702d66e49289a98e3246d7c35a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "e8fae7e6852c87942616af0fd703f902abf1365fae6db442286527224c371fa2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "44a91c6573cd70fe120d44ebc7ad445da2d9bc46ac6fb36bf049edbb02797c5c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "19c3635d876194dddf030987b4cee7cffde4a97881523f3f013eb76d202c73b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "be543f3ed200e602c7134b9f8a59583c1607ed0a65aac29cbaf753db6971f237",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "63e7aa146b5f80f8f4a720a906f1995acef5aafdc3d639b4931041917fd4f684",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "366f8032392a03a19cf00289ee108315e177c93e6d8cf06fba0cbd487bec18b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "68e6ac400d2792954fbf922c777b7d0443f797c8aac6a9d3355481619f530044",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "a70b17d007af5614ad481027a8c6708bc80c1a97b390c6d15c5d82123e551f4d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "5723293ed3ae73d642f69a0eaf49d8c5e881fa282a3397803715ada9ca04d0a0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "4cfdc6cfaab6be1458fd9c6a4cdf8c89aaedf79be5902f9a4a558928f78286a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "f94e7f36ab8a338acc7d25541b721c6c7b70376fa2558b9c60e74fba95b5bc0d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "1f0aba362cda502d1659bad5dfc58c2d5d0aa9ee18ed604a7e7b1970bb46a0e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "contracts/core/Allo.sol:Allo": {
        "src": "contracts/core/Allo.sol:89",
        "version": {
          "withMetadata": "fdfab481c06b86d50d181f5c2db0b05206e4012dfeb1096be95d19e677d9e980",
          "withoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3",
          "linkedWithoutMetadata": "2f0bb5c05d4ff444357fef42d369f70e73f71d58052d6c259b2c1010039dd8a3"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "solady/src/auth/Ownable.sol:Ownable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IAllo.sol:IAllo"
        ],
        "libraries": [
          "contracts/core/libraries/Clone.sol:Clone"
        ],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "getFeeDenominator()",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "isCloneableStrategy(address)",
          "getPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "percentFee",
              "offset": 0,
              "slot": "52",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:114"
            },
            {
              "label": "baseFee",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:129"
            },
            {
              "label": "_poolIndex",
              "offset": 0,
              "slot": "54",
              "type": "t_uint256",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "55",
              "type": "t_address_payable",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:132"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "56",
              "type": "t_contract(IRegistry)2625",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:133"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "57",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:134"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "58",
              "type": "t_mapping(t_uint256,t_struct(Pool)2144_storage)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:135"
            },
            {
              "label": "cloneableStrategies",
              "offset": 0,
              "slot": "59",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Allo",
              "src": "contracts/core/Allo.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IStrategy)2796": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)2144_storage)": {
              "label": "mapping(uint256 => struct IAllo.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Pool)2144_storage": {
              "label": "struct IAllo.Pool",
              "members": [
                {
                  "label": "profileId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2796",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "managerRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Anchor.sol:Anchor": {
        "src": "contracts/core/Anchor.sol:89",
        "version": {
          "withMetadata": "ad5fd04a5efb2fcd89740a48c98ef9991133e5c0e97040a9f80be655982b1993",
          "withoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a",
          "linkedWithoutMetadata": "7c387b18ca48b348b1f66a70ba201e3a467bf09f94fc5b8e83ff8746c22ec24a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "execute(address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Anchor",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "registry",
            "src": "contracts/core/Anchor.sol:89"
          },
          {
            "kind": "state-variable-immutable",
            "name": "profileId",
            "src": "contracts/core/Anchor.sol:89"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/Registry.sol:Registry": {
        "src": "contracts/core/Registry.sol:103",
        "version": {
          "withMetadata": "327f44c2bd3d82e60e0edf7b523bf25702eff51f1830c396f9a288a5e349f477",
          "withoutMetadata": "19d31f589012f51cef2f3d9f33cc074ab0467906d900b3423f2b7ad9b4993953",
          "linkedWithoutMetadata": "19d31f589012f51cef2f3d9f33cc074ab0467906d900b3423f2b7ad9b4993953"
        },
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl",
          "contracts/core/libraries/Native.sol:Native",
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context",
          "contracts/core/interfaces/IRegistry.sol:IRegistry"
        ],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "initialize(address)",
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "anchorToProfileId",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:109"
            },
            {
              "label": "profilesById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(Profile)2452_storage)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:111"
            },
            {
              "label": "profileIdToPendingOwner",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Registry",
              "src": "contracts/core/Registry.sol:113"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Profile)2452_storage)": {
              "label": "mapping(bytes32 => struct IRegistry.Profile)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Profile)2452_storage": {
              "label": "struct IRegistry.Profile",
              "members": [
                {
                  "label": "id",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "anchor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IAllo.sol:IAllo": {
        "src": "contracts/core/interfaces/IAllo.sol:97",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address payable,uint256,uint256)",
          "updatePoolMetadata(uint256,(uint256,string))",
          "updateRegistry(address)",
          "updateTreasury(address payable)",
          "updatePercentFee(uint256)",
          "updateBaseFee(uint256)",
          "addToCloneableStrategies(address)",
          "removeFromCloneableStrategies(address)",
          "addPoolManager(uint256,address)",
          "removePoolManager(uint256,address)",
          "recoverFunds(address,address)",
          "registerRecipient(uint256,bytes)",
          "batchRegisterRecipient(uint256[],bytes[])",
          "fundPool(uint256,uint256)",
          "allocate(uint256,bytes)",
          "batchAllocate(uint256[],bytes[])",
          "distribute(uint256,address[],bytes)",
          "isPoolAdmin(uint256,address)",
          "isPoolManager(uint256,address)",
          "isCloneableStrategy(address)",
          "getStrategy(uint256)",
          "getPercentFee()",
          "getBaseFee()",
          "getTreasury()",
          "getRegistry()",
          "getPool(uint256)",
          "getFeeDenominator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IRegistry.sol:IRegistry": {
        "src": "contracts/core/interfaces/IRegistry.sol:92",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProfileById(bytes32)",
          "getProfileByAnchor(address)",
          "isOwnerOrMemberOfProfile(bytes32,address)",
          "isOwnerOfProfile(bytes32,address)",
          "isMemberOfProfile(bytes32,address)",
          "createProfile(uint256,string,(uint256,string),address,address[])",
          "updateProfileName(bytes32,string)",
          "updateProfileMetadata(bytes32,(uint256,string))",
          "updateProfilePendingOwner(bytes32,address)",
          "acceptProfileOwnership(bytes32)",
          "addMembers(bytes32,address[])",
          "removeMembers(bytes32,address[])",
          "recoverFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/interfaces/IStrategy.sol:IStrategy": {
        "src": "contracts/core/interfaces/IStrategy.sol:98",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "isValidAllocator(address)",
          "isPoolActive()",
          "getPoolAmount()",
          "increasePoolAmount(uint256)",
          "getRecipientStatus(address)",
          "getPayouts(address[],bytes[])",
          "initialize(uint256,bytes)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Clone.sol:Clone": {
        "src": "contracts/core/libraries/Clone.sol:37",
        "version": {
          "withMetadata": "fde5145c87dc7af9904126c46fe082bd31ea61e156b7c22bb75a9da17c670a9b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Errors.sol:Errors": {
        "src": "contracts/core/libraries/Errors.sol:109",
        "version": {
          "withMetadata": "0b48a6cc2345722c86976b3be52cfef7ca4feaf89f27efbc2320b657f25e59d4",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Native.sol:Native": {
        "src": "contracts/core/libraries/Native.sol:26",
        "version": {
          "withMetadata": "d45e8e7e32ff08f7e9a5625ca5e2de99323893f068d5ab5e436793226c20ac1a",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/core/libraries/Transfer.sol:Transfer": {
        "src": "contracts/core/libraries/Transfer.sol:95",
        "version": {
          "withMetadata": "cc47564eb232c88da9f4975745510705d5fee2d2bc0af353c6eb82e4d49aad5c",
          "withoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466",
          "linkedWithoutMetadata": "75a382085e6ebedb1be14db6e6a435c3ec636ea50fb15c60688c9895d8fc3466"
        },
        "inherit": [
          "contracts/core/libraries/Native.sol:Native"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "contracts/factory/ContractFactory.sol:ContractFactory": {
        "src": "contracts/factory/ContractFactory.sol:107",
        "version": {
          "withMetadata": "afb1926dc4c7bdeda9c6a3e720b16b3c05756744a1ef5e3b89d9adf6872ae858",
          "withoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13",
          "linkedWithoutMetadata": "0cd9f0333d78bdd2af9498d5d4adeec01b0e328ca33e6873216a037ccc439f13"
        },
        "inherit": [],
        "libraries": [
          "solady/src/utils/CREATE3.sol:CREATE3"
        ],
        "methods": [
          "()",
          "deploy(string,string,bytes)",
          "setDeployer(address,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ContractFactory",
            "src": "contracts/factory/ContractFactory.sol:119"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "usedSalts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            },
            {
              "label": "isDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ContractFactory",
              "src": "contracts/factory/ContractFactory.sol:119"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/BaseStrategy.sol:BaseStrategy": {
        "src": "contracts/strategies/BaseStrategy.sol:111",
        "inherit": [
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "getAllo()",
          "getPoolId()",
          "getStrategyId()",
          "getPoolAmount()",
          "isPoolActive()",
          "getRecipientStatus(address)",
          "increasePoolAmount(uint256)",
          "registerRecipient(bytes,address)",
          "allocate(bytes,address)",
          "distribute(address[],bytes,address)",
          "getPayouts(address[],bytes[])",
          "isValidAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseStrategy",
            "src": "contracts/strategies/BaseStrategy.sol:129"
          },
          {
            "kind": "state-variable-immutable",
            "name": "allo",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          },
          {
            "kind": "state-variable-immutable",
            "name": "strategyId",
            "src": "contracts/strategies/BaseStrategy.sol:117"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:DirectGrantsSimpleStrategy": {
        "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:112",
        "version": {
          "withMetadata": "4878eca6facb4ae3fb280cad52326e78fc91481de53e944ad551931a775cab87",
          "withoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d",
          "linkedWithoutMetadata": "ab5389251e0ffdcfb84d04d58efda1952af7bb08678d257f83fc95b2c255337d"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getMilestoneStatus(address,uint256)",
          "getMilestones(address)",
          "setMilestones(address,struct DirectGrantsSimpleStrategy.Milestone[])",
          "reviewSetMilestones(address,uint8)",
          "submitMilestone(address,uint256,(uint256,string))",
          "rejectMilestone(address,uint256)",
          "setRecipientStatusToInReview(address[])",
          "setPoolActive(bool)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DirectGrantsSimpleStrategy",
            "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:191"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:161"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:162"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:164"
            },
            {
              "label": "_registry",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:166"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:167"
            },
            {
              "label": "_acceptedRecipientIds",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:172"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)3884_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:177"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:179"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DirectGrantsSimpleStrategy",
              "src": "contracts/strategies/_poc/direct-grants-simple/DirectGrantsSimpleStrategy.sol:184"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)3893_storage)dyn_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_struct(Milestone)3893_storage)dyn_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Milestone[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)3884_storage)": {
              "label": "mapping(address => struct DirectGrantsSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)3893_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)3884_storage": {
              "label": "struct DirectGrantsSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "milestonesReviewStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:DonationVotingCustomRegistryStrategy": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51",
        "version": {
          "withMetadata": "781f41d2df1bc4443da15deb09143692041c332e14a15258534be9f473897ab2",
          "withoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37",
          "linkedWithoutMetadata": "5ec248496bb5814db29db320567ee228cf276e7cfd7096f1fc375c38e58dfc37"
        },
        "inherit": [
          "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingCustomRegistryStrategy",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(SimpleProjectRegistry)5456",
              "contract": "DonationVotingCustomRegistryStrategy",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/DonationVotingCustomRegistryStrategy.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(SimpleProjectRegistry)5456": {
              "label": "contract SimpleProjectRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:SimpleProjectRegistry": {
        "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:26",
        "version": {
          "withMetadata": "b3fd6196a86f7efffa928fa83f55f655c7b39b0ff313d2fb6102759c5bef3786",
          "withoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87",
          "linkedWithoutMetadata": "c42152b6d8418493091034c29cc09b77be668156c32f57fa1f159cd5714b6a87"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addProject(address)",
          "addProjects(address[])",
          "removeProject(address)",
          "removeProjects(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleProjectRegistry",
            "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:58"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "projects",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SimpleProjectRegistry",
              "src": "contracts/strategies/_poc/donation-voting-custom-registry/SimpleProjectRegistry.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:DonationVotingStrategy": {
        "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:100",
        "version": {
          "withMetadata": "80a3715df56a5dd5b5d43593f0ab3552657dca908fe0688996a1cc8b58245225",
          "withoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c",
          "linkedWithoutMetadata": "3ec7486dc8e287f7e75c5151a3f2fe08b9f0a051775db358d3d8f08da384837c"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "setPayout(address[],uint256[])",
          "claim(struct DonationVotingStrategy.Claim[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingStrategy",
            "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:198"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:155"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "4",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:156"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:157"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:158"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:161"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)5485_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:164"
            },
            {
              "label": "payoutSummaries",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:168"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingStrategy",
              "src": "contracts/strategies/_poc/donation-voting/DonationVotingStrategy.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PayoutSummary)2643_storage)": {
              "label": "mapping(address => struct IStrategy.PayoutSummary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)5485_storage)": {
              "label": "mapping(address => struct DonationVotingStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PayoutSummary)2643_storage": {
              "label": "struct IStrategy.PayoutSummary",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)5485_storage": {
              "label": "struct DonationVotingStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:ProportionalPayoutStrategy": {
        "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:112",
        "version": {
          "withMetadata": "002037cf30c961de7133f1586bbb962f57284d924b3dc22dcf1eebb37bf116c5",
          "withoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288",
          "linkedWithoutMetadata": "08ce3ade956cda6594eb2b2b26b6394314715341bbd16f0b7b5d7b5abc73a288"
        },
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "setAllocationTime(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ProportionalPayoutStrategy",
            "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:166"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(Recipient)6892_storage)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:151"
            },
            {
              "label": "hasAllocated",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:152"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:153"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(ERC721)30781",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:154"
            },
            {
              "label": "maxRecipientsAllowed",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:157"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:158"
            },
            {
              "label": "totalAllocations",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:159"
            },
            {
              "label": "allocationStartTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            },
            {
              "label": "allocationEndTime",
              "offset": 8,
              "slot": "10",
              "type": "t_uint64",
              "contract": "ProportionalPayoutStrategy",
              "src": "contracts/strategies/_poc/proportional-payout/ProportionalPayoutStrategy.sol:160"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)6892_storage)": {
              "label": "mapping(address => struct ProportionalPayoutStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)6892_storage": {
              "label": "struct ProportionalPayoutStrategy.Recipient",
              "members": [
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:QVGovernanceERC20Votes": {
        "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:89",
        "version": {
          "withMetadata": "dfe378c2d07fae6fd82fdca13117937a8639607410bc8738e2cfa4347fff1be7",
          "withoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f",
          "linkedWithoutMetadata": "73bd804905b977d1c9d5aac698b0555f496b116b71a2e58743c769494d5f055f"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVGovernanceERC20Votes",
            "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:104"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "govToken",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IVotes)18741",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:97"
            },
            {
              "label": "timestamp",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "QVGovernanceERC20Votes",
              "src": "contracts/strategies/_poc/qv-governance/QVGovernanceERC20Votes.sol:98"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(IVotes)18741": {
              "label": "contract IVotes",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:HackathonQVStrategy": {
        "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:113",
        "version": {
          "withMetadata": "bf6bafda7af8bcb922bbadde4fd147ee48d0fc410e2e252108e873c46c791c68",
          "withoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c",
          "linkedWithoutMetadata": "94f052f1dfc0f99a9d01b9e0a892be70484d9f24eff587013e7ef7eb789b219c"
        },
        "inherit": [
          "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver",
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllowedRecipientIds(address[],uint64,bytes)",
          "setPayoutPercentages(uint256[])",
          "getPayouts(address[],bytes[])",
          "getAttestation(bytes32)",
          "getSchema(bytes32)",
          "isPayable()",
          "isAttestationExpired(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "HackathonQVStrategy",
            "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:150"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "_eas",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            },
            {
              "label": "payoutPercentages",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:132"
            },
            {
              "label": "votesByRank",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:133"
            },
            {
              "label": "easInfo",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(EASInfo)7782_storage",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "nft",
              "offset": 0,
              "slot": "19",
              "type": "t_contract(ERC721)30781",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:134"
            },
            {
              "label": "recipientIdToUID",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:136"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:137"
            },
            {
              "label": "recipientIdToIndex",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:139"
            },
            {
              "label": "indexToRecipientId",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "HackathonQVStrategy",
              "src": "contracts/strategies/_poc/qv-hackathon/HackathonQVStrategy.sol:145"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ISchemaRegistry)17477": {
              "label": "contract ISchemaRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(EASInfo)7782_storage": {
              "label": "struct HackathonQVStrategy.EASInfo",
              "members": [
                {
                  "label": "eas",
                  "type": "t_contract(IEAS)17432",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "schemaRegistry",
                  "type": "t_contract(ISchemaRegistry)17477",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "schemaUID",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "schema",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:SchemaResolver": {
        "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:19",
        "inherit": [
          "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver"
        ],
        "libraries": [],
        "methods": [
          "isPayable()",
          "()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_eas",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IEAS)17432",
              "contract": "SchemaResolver",
              "src": "contracts/strategies/_poc/qv-hackathon/SchemaResolver.sol:28"
            }
          ],
          "types": {
            "t_contract(IEAS)17432": {
              "label": "contract IEAS",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:QVNftTieredStrategy": {
        "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:96",
        "version": {
          "withMetadata": "dd71db329f1447e8993123bdc070240b5be492652f6c3dc8da0466282a406481",
          "withoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e",
          "linkedWithoutMetadata": "ab12cd3005380373488b60b88d02134d6dac3b1e9daae2d28f6fce853f3de06e"
        },
        "inherit": [
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVNftTieredStrategy",
            "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "nfts",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_contract(ERC721)30781)dyn_storage",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:112"
            },
            {
              "label": "maxVoiceCreditsPerNft",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_contract(ERC721)30781,t_uint256)",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:113"
            },
            {
              "label": "voiceCreditsUsedPerNftId",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))",
              "contract": "QVNftTieredStrategy",
              "src": "contracts/strategies/_poc/qv-nft-tiered/QVNftTieredStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC721)30781)dyn_storage": {
              "label": "contract ERC721[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC721)30781": {
              "label": "contract ERC721",
              "numberOfBytes": "20"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(contract ERC721 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC721)30781,t_uint256)": {
              "label": "mapping(contract ERC721 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:LockupDynamicStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:16",
        "version": {
          "withMetadata": "2da6d7203825c5820e5ae7cf84e06048ddb92998773df75032f5a4a53e838644",
          "withoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb",
          "linkedWithoutMetadata": "fbc664e7aeda4b7f7f9ad47e11864e96d5927450624824946b5bcd74de46b5fb"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupDynamic"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientSegments(address,struct LockupDynamic.SegmentWithDelta[])",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupDynamicStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:42"
            },
            {
              "label": "lockupDynamic",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupDynamic)29192",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)9538_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupDynamicStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupDynamicStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupDynamic)29192": {
              "label": "contract ISablierV2LockupDynamic",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)9538_storage)": {
              "label": "mapping(address => struct LockupDynamicStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)9538_storage": {
              "label": "struct LockupDynamicStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "segments",
                  "type": "t_array(t_struct(SegmentWithDelta)29396_storage)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(SegmentWithDelta)29396_storage": {
              "label": "struct LockupDynamic.SegmentWithDelta",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "exponent",
                  "type": "t_userDefinedValueType(UD2x18)26749",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "delta",
                  "type": "t_uint40",
                  "offset": 24,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD2x18)26749": {
              "label": "UD2x18",
              "numberOfBytes": "8",
              "underlying": "t_uint64"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:LockupLinearStrategy": {
        "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:16",
        "version": {
          "withMetadata": "1b0866a68aa70c3798855a5509aa897b1a1c04f9e297e14abc2adaae323a9f30",
          "withoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9",
          "linkedWithoutMetadata": "2766e84e67eabad97990605ace7c3e82d513ad0cd625ad3809dbe6e8c5dfb7e9"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "lib/v2-core/src/types/DataTypes.sol:LockupLinear"
        ],
        "methods": [
          "(address,address,string)",
          "initialize(uint256,bytes)",
          "getAllRecipientStreamIds(address)",
          "getBroker()",
          "getStatus(address)",
          "getPayouts(address[],bytes)",
          "getRecipient(address)",
          "getRecipientStreamId(address,uint256)",
          "cancelStream(address,uint256)",
          "changeRecipientDurations(address,(uint40,uint40))",
          "setBroker((address,uint256))",
          "setRecipientStatusToInReview(address[])",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockupLinearStrategy",
            "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:40"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:41"
            },
            {
              "label": "grantAmountRequired",
              "offset": 2,
              "slot": "4",
              "type": "t_bool",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:42"
            },
            {
              "label": "lockupLinear",
              "offset": 3,
              "slot": "4",
              "type": "t_contract(ISablierV2LockupLinear)29281",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:43"
            },
            {
              "label": "allocatedGrantAmount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:46"
            },
            {
              "label": "broker",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Broker)29312_storage",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:50"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Recipient)10715_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:53"
            },
            {
              "label": "_recipientStreamIds",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LockupLinearStrategy",
              "src": "contracts/strategies/_poc/sablier-v2/LockupLinearStrategy.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISablierV2LockupLinear)29281": {
              "label": "contract ISablierV2LockupLinear",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)10715_storage)": {
              "label": "mapping(address => struct LockupLinearStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Broker)29312_storage": {
              "label": "struct Broker",
              "members": [
                {
                  "label": "account",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_userDefinedValueType(UD60x18)28553",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Durations)29464_storage": {
              "label": "struct LockupLinear.Durations",
              "members": [
                {
                  "label": "cliff",
                  "type": "t_uint40",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "total",
                  "type": "t_uint40",
                  "offset": 5,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)10715_storage": {
              "label": "struct LockupLinearStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cancelable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "grantAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durations",
                  "type": "t_struct(Durations)29464_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_userDefinedValueType(UD60x18)28553": {
              "label": "UD60x18",
              "numberOfBytes": "32",
              "underlying": "t_uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:NFT": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:8",
        "version": {
          "withMetadata": "34e04642d04d17a199348b693f9ec0ba55fc066c117385fe955bb232e7ec2935",
          "withoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb",
          "linkedWithoutMetadata": "8cb56b13b3a28a0670458267486272612909f877d123a98977ab9be7c8239ceb"
        },
        "inherit": [
          "solady/src/auth/Ownable.sol:Ownable",
          "solady/src/tokens/ERC721.sol:ERC721"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string,uint256,address)",
          "name()",
          "symbol()",
          "mintTo(address)",
          "tokenURI(uint256)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:16"
            },
            {
              "label": "MINT_PRICE",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:17"
            },
            {
              "label": "__name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:20"
            },
            {
              "label": "__symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:NFTFactory": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:6",
        "version": {
          "withMetadata": "c25b010c3397b396d2364e7039b14b87b367e9da1d626a7a51cc66e5a5a1c0da",
          "withoutMetadata": "5014bf32943d39f2c92c5865f1f426ce26f554044198a0e0bd10141d0f6fb7b7",
          "linkedWithoutMetadata": "5014bf32943d39f2c92c5865f1f426ce26f554044198a0e0bd10141d0f6fb7b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createNFTContract(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isNFTContract",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "NFTFactory",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/NFTFactory.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:WrappedVotingNftMintStrategy": {
        "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:100",
        "version": {
          "withMetadata": "abaae693cab2b7f77ceee52b11ce70e3a0d114c8ae158763dd77af9290568221",
          "withoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef",
          "linkedWithoutMetadata": "71092f04c37721f7488962e8bbf3fd88b88ddb2066ab43e84ac28430b425f1ef"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "setAllocationTimes(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedVotingNftMintStrategy",
            "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "nftFactory",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(NFTFactory)11929",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:134"
            },
            {
              "label": "allocationStartTime",
              "offset": 20,
              "slot": "4",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:135"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "currentWinner",
              "offset": 8,
              "slot": "5",
              "type": "t_address",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:136"
            },
            {
              "label": "allocations",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WrappedVotingNftMintStrategy",
              "src": "contracts/strategies/_poc/wrapped-voting-nftmint/WrappedVotingNftMintStrategy.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(NFTFactory)11929": {
              "label": "contract NFTFactory",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:99",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(struct DonationVotingMerkleDistributionBaseStrategy.ApplicationStatus[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)",
          "withdraw(uint256)",
          "updateDistribution(bytes32,(uint256,string))",
          "isDistributionSet()",
          "hasBeenDistributed(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionBaseStrategy",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:286"
          },
          {
            "kind": "state-variable-immutable",
            "name": "PERMIT2",
            "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:230"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:DonationVotingMerkleDistributionDirectTransferStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76",
        "version": {
          "withMetadata": "6d4f668cd572f757be851ddd6cd43d59add715aa045580c934d1b13c50198b78",
          "withoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4",
          "linkedWithoutMetadata": "7557c6a8ae5e73ceafdaf5dd395fbbce55639e999f7fb40636a1cc2a55c6b2e4"
        },
        "inherit": [
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionDirectTransferStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-direct-transfer/DonationVotingMerkleDistributionDirectTransferStrategy.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:DonationVotingMerkleDistributionVaultStrategy": {
        "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:92",
        "version": {
          "withMetadata": "d10b1abfd48f921a1435de7317ce91c3144916ac46e89c7b592cdec36d08f025",
          "withoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f",
          "linkedWithoutMetadata": "4181bad1ba0a608f64ccdc9a7d967497505af9477b6f923d58e8f3ba2412ca0f"
        },
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:DonationVotingMerkleDistributionBaseStrategy",
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [
          "solady/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,string,address)",
          "claim(struct DonationVotingMerkleDistributionVaultStrategy.Claim[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DonationVotingMerkleDistributionVaultStrategy",
            "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "distributionMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Metadata)2922_storage",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:205"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:209"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:212"
            },
            {
              "label": "distributionStarted",
              "offset": 2,
              "slot": "5",
              "type": "t_bool",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:213"
            },
            {
              "label": "registrationStartTime",
              "offset": 3,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:216"
            },
            {
              "label": "registrationEndTime",
              "offset": 11,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:219"
            },
            {
              "label": "allocationStartTime",
              "offset": 19,
              "slot": "5",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "allocationEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint64",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:220"
            },
            {
              "label": "totalPayoutAmount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:222"
            },
            {
              "label": "recipientsCounter",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:226"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IRegistry)2625",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:228"
            },
            {
              "label": "merkleRoot",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:237"
            },
            {
              "label": "statusesBitMap",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:253"
            },
            {
              "label": "recipientToStatusIndexes",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:254"
            },
            {
              "label": "distributedBitMap",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:258"
            },
            {
              "label": "allowedTokens",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:262"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(Recipient)12500_storage)",
              "contract": "DonationVotingMerkleDistributionBaseStrategy",
              "src": "contracts/strategies/donation-voting-merkle-base/DonationVotingMerkleDistributionBaseStrategy.sol:264"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "16",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "16",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "18",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            },
            {
              "label": "claims",
              "offset": 0,
              "slot": "67",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "DonationVotingMerkleDistributionVaultStrategy",
              "src": "contracts/strategies/donation-voting-merkle-distribution-vault/DonationVotingMerkleDistributionVaultStrategy.sol:116"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)12500_storage)": {
              "label": "mapping(address => struct DonationVotingMerkleDistributionBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)12500_storage": {
              "label": "struct DonationVotingMerkleDistributionBaseStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy": {
        "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:89",
        "inherit": [
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "reviewRecipients(address[],enum IStrategy.Status[])",
          "updatePoolTimestamps(uint64,uint64,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVBaseStrategy",
            "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/qv-simple/QVSimpleStrategy.sol:QVSimpleStrategy": {
        "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:89",
        "version": {
          "withMetadata": "dd0412352a768271ca642575ba417f31160cf01dcfedcc410ac16ef3a97f6880",
          "withoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575",
          "linkedWithoutMetadata": "02e1e6045734fbf34bb9a809ff82ece156308cbb87ef249dc38aa6946a868575"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall",
          "contracts/strategies/qv-base/QVBaseStrategy.sol:QVBaseStrategy",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "addAllocator(address)",
          "removeAllocator(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "QVSimpleStrategy",
            "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "totalRecipientVotes",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:161"
            },
            {
              "label": "reviewThreshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:165"
            },
            {
              "label": "registrationStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:170"
            },
            {
              "label": "registrationEndTime",
              "offset": 8,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationStartTime",
              "offset": 16,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:174"
            },
            {
              "label": "allocationEndTime",
              "offset": 24,
              "slot": "5",
              "type": "t_uint64",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:175"
            },
            {
              "label": "registryGating",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:180"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:182"
            },
            {
              "label": "_registry",
              "offset": 2,
              "slot": "6",
              "type": "t_contract(IRegistry)2625",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:184"
            },
            {
              "label": "recipients",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(Recipient)14552_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:224"
            },
            {
              "label": "allocators",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(Allocator)14563_storage)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:230"
            },
            {
              "label": "paidOut",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:235"
            },
            {
              "label": "reviewsByStatus",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))",
              "contract": "QVBaseStrategy",
              "src": "contracts/strategies/qv-base/QVBaseStrategy.sol:236"
            },
            {
              "label": "maxVoiceCreditsPerAllocator",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:108"
            },
            {
              "label": "allowedAllocators",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "QVSimpleStrategy",
              "src": "contracts/strategies/qv-simple/QVSimpleStrategy.sol:111"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Status)2638,t_uint256))": {
              "label": "mapping(address => mapping(enum IStrategy.Status => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Allocator)14563_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Allocator)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)14552_storage)": {
              "label": "mapping(address => struct QVBaseStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Status)2638,t_uint256)": {
              "label": "mapping(enum IStrategy.Status => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Allocator)14563_storage": {
              "label": "struct QVBaseStrategy.Allocator",
              "members": [
                {
                  "label": "voiceCredits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voiceCreditsCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesCastToRecipient",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Recipient)14552_storage": {
              "label": "struct QVBaseStrategy.Recipient",
              "members": [
                {
                  "label": "totalVotesReceived",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "1"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:RFPCommitteeStrategy": {
        "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:83",
        "version": {
          "withMetadata": "55f193c6471c95ae06fc9b2f94b317f023d560b224627274319892aa7cefe2ac",
          "withoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928",
          "linkedWithoutMetadata": "9b55e5816022eb416d9adfbd246ba296ff720722516d0d5e4910bbf10fe38928"
        },
        "inherit": [
          "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy",
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPCommitteeStrategy",
            "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:125"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            },
            {
              "label": "voteThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:104"
            },
            {
              "label": "votedFor",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_address)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:109"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RFPCommitteeStrategy",
              "src": "contracts/strategies/rfp-committee/RFPCommitteeStrategy.sol:114"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:RFPSimpleStrategy": {
        "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:107",
        "version": {
          "withMetadata": "1e3fed60d72b416d36bdee1826341cbe950583a8e0667835821ca74ec9e3d699",
          "withoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6",
          "linkedWithoutMetadata": "290fdcbd33eeb0af599df17731aa82fce32889517e865d944ddefffe243a01e6"
        },
        "inherit": [
          "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "contracts/strategies/BaseStrategy.sol:BaseStrategy",
          "contracts/core/libraries/Errors.sol:Errors",
          "contracts/core/libraries/Transfer.sol:Transfer",
          "contracts/core/libraries/Native.sol:Native",
          "contracts/core/interfaces/IStrategy.sol:IStrategy"
        ],
        "libraries": [],
        "methods": [
          "(address,string)",
          "initialize(uint256,bytes)",
          "getRecipient(address)",
          "getPayouts(address[],bytes[])",
          "getMilestone(uint256)",
          "getMilestoneStatus(uint256)",
          "setPoolActive(bool)",
          "setMilestones(struct RFPSimpleStrategy.Milestone[])",
          "submitUpcomingMilestone((uint256,string))",
          "increaseMaxBid(uint256)",
          "rejectMilestone(uint256)",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RFPSimpleStrategy",
            "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:199"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "poolActive",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:118"
            },
            {
              "label": "poolId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "poolAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BaseStrategy",
              "src": "contracts/strategies/BaseStrategy.sol:121"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "useRegistryAnchor",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:170"
            },
            {
              "label": "metadataRequired",
              "offset": 1,
              "slot": "4",
              "type": "t_bool",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:171"
            },
            {
              "label": "acceptedRecipientId",
              "offset": 2,
              "slot": "4",
              "type": "t_address",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:176"
            },
            {
              "label": "_registry",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IRegistry)2625",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:179"
            },
            {
              "label": "maxBid",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:181"
            },
            {
              "label": "upcomingMilestone",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:182"
            },
            {
              "label": "_recipientIds",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:185"
            },
            {
              "label": "milestones",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Milestone)16062_storage)dyn_storage",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:187"
            },
            {
              "label": "_recipients",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_struct(Recipient)16053_storage)",
              "contract": "RFPSimpleStrategy",
              "src": "contracts/strategies/rfp-simple/RFPSimpleStrategy.sol:191"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Milestone)16062_storage)dyn_storage": {
              "label": "struct RFPSimpleStrategy.Milestone[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IRegistry)2625": {
              "label": "contract IRegistry",
              "numberOfBytes": "20"
            },
            "t_enum(Status)2638": {
              "label": "enum IStrategy.Status",
              "members": [
                "None",
                "Pending",
                "Accepted",
                "Rejected",
                "Appealed",
                "InReview",
                "Canceled"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Recipient)16053_storage)": {
              "label": "mapping(address => struct RFPSimpleStrategy.Recipient)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Metadata)2922_storage": {
              "label": "struct Metadata",
              "members": [
                {
                  "label": "protocol",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pointer",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Milestone)16062_storage": {
              "label": "struct RFPSimpleStrategy.Milestone",
              "members": [
                {
                  "label": "amountPercentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "metadata",
                  "type": "t_struct(Metadata)2922_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "milestoneStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Recipient)16053_storage": {
              "label": "struct RFPSimpleStrategy.Recipient",
              "members": [
                {
                  "label": "useRegistryAnchor",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "recipientAddress",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "proposalBid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "recipientStatus",
                  "type": "t_enum(Status)2638",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/IEAS.sol:IEAS": {
        "src": "lib/eas-contracts/contracts/IEAS.sol:82",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSchemaRegistry()",
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))",
          "multiAttest(struct MultiAttestationRequest[])",
          "multiAttestByDelegation(struct MultiDelegatedAttestationRequest[])",
          "revoke((bytes32,(bytes32,uint256)))",
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))",
          "multiRevoke(struct MultiRevocationRequest[])",
          "multiRevokeByDelegation(struct MultiDelegatedRevocationRequest[])",
          "timestamp(bytes32)",
          "multiTimestamp(bytes32[])",
          "revokeOffchain(bytes32)",
          "multiRevokeOffchain(bytes32[])",
          "getAttestation(bytes32)",
          "isAttestationValid(bytes32)",
          "getTimestamp(bytes32)",
          "getRevokeOffchain(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol:ISchemaRegistry": {
        "src": "lib/eas-contracts/contracts/ISchemaRegistry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "register(string,address,bool)",
          "getSchema(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:ISchemaResolver": {
        "src": "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isPayable()",
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiAttest(struct Attestation[],uint256[])",
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
          "multiRevoke(struct Attestation[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:ClonesUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol:19",
        "version": {
          "withMetadata": "b9e02fe77dfa21a16b48674e87d42dc1644f5b574ce4c5db422f7da69a8aa0f7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:88"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "b026d1ec53ab810b88fcf9cd9df913ac2cf4f0963848f6d4f4e9d468f0df7a7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:AccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:50",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl",
          "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)",
              "contract": "AccessControl",
              "src": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18294_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)18294_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "99fb9069d8ce36cb30de715a0f5059a3d16aad6ac9a0e5e05419a8106d7bb367",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "ca9cac755e49d5982c20cdf3498f358063948615e1c99726b0a11c2517d3becd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "lib/openzeppelin-contracts/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol:Context": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:Multicall": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Multicall.sol:13",
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol:Strings": {
        "src": "lib/openzeppelin-contracts/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "5b319ac789e3b371b23ba90ac37e114243f1313fb089d0d51079ae70f2bdf899",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math",
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "cdf0f5ebf4393dd442d4ac0fd9c28d137c7121866bdefd7e42a26197cf3f200e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "56538d04b7b77dad6bc676bb46c697855a14a28ca2daeda0e2d0e5e6c38571ae",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "fae17ac223a1791901a9108ba0172c9e5c027009057a5c6d057becf5afcff695",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/IEIP712.sol:IEIP712": {
        "src": "lib/permit2/src/interfaces/IEIP712.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/permit2/src/interfaces/ISignatureTransfer.sol:ISignatureTransfer": {
        "src": "lib/permit2/src/interfaces/ISignatureTransfer.sol:9",
        "inherit": [
          "lib/permit2/src/interfaces/IEIP712.sol:IEIP712"
        ],
        "libraries": [],
        "methods": [
          "nonceBitmap(address,uint256)",
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)",
          "permitTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes)",
          "permitWitnessTransferFrom((struct ISignatureTransfer.TokenPermissions[],uint256,uint256),struct ISignatureTransfer.SignatureTransferDetails[],address,bytes32,string,bytes)",
          "invalidateUnorderedNonces(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable": {
        "src": "lib/v2-core/src/interfaces/IAdminable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "transferAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Base.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_FEE()",
          "comptroller()",
          "protocolRevenues(address)",
          "claimProtocolRevenues(address)",
          "setComptroller(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:ISablierV2Comptroller": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol:12",
        "inherit": [
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "flashFee()",
          "isFlashAsset(address)",
          "protocolFees(address)",
          "setFlashFee(uint256)",
          "setProtocolFee(address,uint256)",
          "toggleFlashAsset(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup": {
        "src": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:13",
        "inherit": [
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getAsset(uint256)",
          "getDepositedAmount(uint256)",
          "getEndTime(uint256)",
          "getRecipient(uint256)",
          "getRefundedAmount(uint256)",
          "getSender(uint256)",
          "getStartTime(uint256)",
          "getWithdrawnAmount(uint256)",
          "isCancelable(uint256)",
          "isCold(uint256)",
          "isDepleted(uint256)",
          "isStream(uint256)",
          "isWarm(uint256)",
          "nextStreamId()",
          "refundableAmountOf(uint256)",
          "statusOf(uint256)",
          "streamedAmountOf(uint256)",
          "wasCanceled(uint256)",
          "withdrawableAmountOf(uint256)",
          "burn(uint256)",
          "cancel(uint256)",
          "cancelMultiple(uint256[])",
          "renounce(uint256)",
          "setNFTDescriptor(address)",
          "withdraw(uint256,address,uint128)",
          "withdrawMax(uint256,address)",
          "withdrawMaxAndTransfer(uint256,address)",
          "withdrawMultiple(uint256[],address,uint128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:ISablierV2LockupDynamic": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupDynamic.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "MAX_SEGMENT_COUNT()",
          "getRange(uint256)",
          "getSegments(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDeltas((address,bool,address,uint128,address,(address,uint256),struct LockupDynamic.SegmentWithDelta[]))",
          "createWithMilestones((address,uint40,bool,address,uint128,address,(address,uint256),struct LockupDynamic.Segment[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:ISablierV2LockupLinear": {
        "src": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol:11",
        "inherit": [
          "lib/v2-core/src/interfaces/ISablierV2Lockup.sol:ISablierV2Lockup",
          "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol:IERC721",
          "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol:IERC165",
          "lib/v2-core/src/interfaces/ISablierV2Base.sol:ISablierV2Base",
          "lib/v2-core/src/interfaces/IAdminable.sol:IAdminable"
        ],
        "libraries": [],
        "methods": [
          "getCliffTime(uint256)",
          "getRange(uint256)",
          "getStream(uint256)",
          "streamedAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))",
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:ISablierV2NFTDescriptor": {
        "src": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:Lockup": {
        "src": "lib/v2-core/src/types/DataTypes.sol:29",
        "version": {
          "withMetadata": "b9cbf4c08f8e68e17c155fbda64c98bfd33924d006b6b636b17322950b610974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupDynamic": {
        "src": "lib/v2-core/src/types/DataTypes.sol:72",
        "version": {
          "withMetadata": "f5624512b5ff0dce01bf8e012c450849818c598b29c18a97c1114074340003c4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "lib/v2-core/src/types/DataTypes.sol:LockupLinear": {
        "src": "lib/v2-core/src/types/DataTypes.sol:180",
        "version": {
          "withMetadata": "b625c42d78a453b81804600dfbfa446849c745d8006e7d9fac513abc84d35b10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/auth/Ownable.sol:Ownable": {
        "src": "solady/src/auth/Ownable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "requestOwnershipHandover()",
          "cancelOwnershipHandover()",
          "completeOwnershipHandover(address)",
          "owner()",
          "ownershipHandoverExpiresAt(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC20.sol:ERC20": {
        "src": "solady/src/tokens/ERC20.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/tokens/ERC721.sol:ERC721": {
        "src": "solady/src/tokens/ERC721.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "balanceOf(address)",
          "getApproved(uint256)",
          "approve(address,uint256)",
          "isApprovedForAll(address,address)",
          "setApprovalForAll(address,bool)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/CREATE3.sol:CREATE3": {
        "src": "solady/src/utils/CREATE3.sol:8",
        "version": {
          "withMetadata": "6cd5a72c3511245b842bcc2aeed47b15d3b95dad50177645a782419c43a184cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      },
      "solady/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solady/src/utils/SafeTransferLib.sol:12",
        "version": {
          "withMetadata": "b64c05e7cb32794bfe081576d52f774a4d904ffa53441faeefaa8da1be3cc422",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}